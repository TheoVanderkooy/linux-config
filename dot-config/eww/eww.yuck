



;; workspaces list
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true
         :halign "start"
         :spacing 0
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        ;; (button :onclick "hyperctl dispatch workspace ${workspace.id}"
        ;;         :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
        ;;   "${workspace.id}")
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}")
            )
          )
        )
      )
    )
  )

;; active window title
(deflisten window :initial "..." "sh ~/.config/eww/scripts/get-window-title")
(defwidget window_w []
  (box
    (label :text "${window}")
    )
  )


;; eww example bar
(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (window_w)
    ;; (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
;; TODO click volume thing to open thingy... and/or mute
    (metric :label battery_status ;;"ðŸ”‹"
            :value battery
            :onchange "")
    ;; (metric :label "ï¡š"
    ;;         :value {EWW_RAM.used_mem_perc}
    ;;         :onchange "")
    ;; (metric :label "ðŸ’¾"
    ;;         :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
    ;;         :onchange "")
    time))

;; TODO update this based on the hyprland recommended stuff
;; (defwidget workspaces []
;;   (box :class "workspaces"
;;        :orientation "h"
;;        :space-evenly true
;;        :halign "start"
;;        :spacing 10
;;     (button :onclick "wmctrl -s 0" 1)
;;     (button :onclick "wmctrl -s 1" 2)
;;     (button :onclick "wmctrl -s 2" 3)
;;     (button :onclick "wmctrl -s 3" 4)
;;     (button :onclick "wmctrl -s 4" 5)
;;     (button :onclick "wmctrl -s 5" 6)
;;     (button :onclick "wmctrl -s 6" 7)
;;     (button :onclick "wmctrl -s 7" 8)
;;     (button :onclick "wmctrl -s 8" 9)))

;; (defwidget music []
;;   (box :class "music"
;;        :orientation "h"
;;        :space-evenly false
;;        :halign "center"
;;     {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



;; (deflisten music :initial ""
;;   "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "1s"
  "date '+%H:%M %b %d, %Y'")

;; TODO indicate whether charging or discharging?
(defpoll battery :interval "5s"
  "scripts/getbat")
(defpoll battery_status :interval "5s"
  "scripts/getbatstat")

(defwindow bar
  :monitor 0
  ;; :windowtype "dock"
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "24px"
                      :anchor "bottom center")
  ;; :reserve (struts :side "top" :distance "4%")
  (bar))

;; TODO change the X11 stuff to wayland here!